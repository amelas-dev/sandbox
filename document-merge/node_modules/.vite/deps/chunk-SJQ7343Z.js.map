{
  "version": 3,
  "sources": ["../../prosemirror-dropcursor/dist/index.js", "../../@tiptap/extension-dropcursor/src/dropcursor.ts"],
  "sourcesContent": ["import { Plugin } from 'prosemirror-state';\r\nimport { dropPoint } from 'prosemirror-transform';\r\n\r\n/**\r\nCreate a plugin that, when added to a ProseMirror instance,\r\ncauses a decoration to show up at the drop position when something\r\nis dragged over the editor.\r\n\r\nNodes may add a `disableDropCursor` property to their spec to\r\ncontrol the showing of a drop cursor inside them. This may be a\r\nboolean or a function, which will be called with a view and a\r\nposition, and should return a boolean.\r\n*/\r\nfunction dropCursor(options = {}) {\r\n    return new Plugin({\r\n        view(editorView) { return new DropCursorView(editorView, options); }\r\n    });\r\n}\r\nclass DropCursorView {\r\n    constructor(editorView, options) {\r\n        var _a;\r\n        this.editorView = editorView;\r\n        this.cursorPos = null;\r\n        this.element = null;\r\n        this.timeout = -1;\r\n        this.width = (_a = options.width) !== null && _a !== void 0 ? _a : 1;\r\n        this.color = options.color === false ? undefined : (options.color || \"black\");\r\n        this.class = options.class;\r\n        this.handlers = [\"dragover\", \"dragend\", \"drop\", \"dragleave\"].map(name => {\r\n            let handler = (e) => { this[name](e); };\r\n            editorView.dom.addEventListener(name, handler);\r\n            return { name, handler };\r\n        });\r\n    }\r\n    destroy() {\r\n        this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));\r\n    }\r\n    update(editorView, prevState) {\r\n        if (this.cursorPos != null && prevState.doc != editorView.state.doc) {\r\n            if (this.cursorPos > editorView.state.doc.content.size)\r\n                this.setCursor(null);\r\n            else\r\n                this.updateOverlay();\r\n        }\r\n    }\r\n    setCursor(pos) {\r\n        if (pos == this.cursorPos)\r\n            return;\r\n        this.cursorPos = pos;\r\n        if (pos == null) {\r\n            this.element.parentNode.removeChild(this.element);\r\n            this.element = null;\r\n        }\r\n        else {\r\n            this.updateOverlay();\r\n        }\r\n    }\r\n    updateOverlay() {\r\n        let $pos = this.editorView.state.doc.resolve(this.cursorPos);\r\n        let isBlock = !$pos.parent.inlineContent, rect;\r\n        let editorDOM = this.editorView.dom, editorRect = editorDOM.getBoundingClientRect();\r\n        let scaleX = editorRect.width / editorDOM.offsetWidth, scaleY = editorRect.height / editorDOM.offsetHeight;\r\n        if (isBlock) {\r\n            let before = $pos.nodeBefore, after = $pos.nodeAfter;\r\n            if (before || after) {\r\n                let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));\r\n                if (node) {\r\n                    let nodeRect = node.getBoundingClientRect();\r\n                    let top = before ? nodeRect.bottom : nodeRect.top;\r\n                    if (before && after)\r\n                        top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;\r\n                    let halfWidth = (this.width / 2) * scaleY;\r\n                    rect = { left: nodeRect.left, right: nodeRect.right, top: top - halfWidth, bottom: top + halfWidth };\r\n                }\r\n            }\r\n        }\r\n        if (!rect) {\r\n            let coords = this.editorView.coordsAtPos(this.cursorPos);\r\n            let halfWidth = (this.width / 2) * scaleX;\r\n            rect = { left: coords.left - halfWidth, right: coords.left + halfWidth, top: coords.top, bottom: coords.bottom };\r\n        }\r\n        let parent = this.editorView.dom.offsetParent;\r\n        if (!this.element) {\r\n            this.element = parent.appendChild(document.createElement(\"div\"));\r\n            if (this.class)\r\n                this.element.className = this.class;\r\n            this.element.style.cssText = \"position: absolute; z-index: 50; pointer-events: none;\";\r\n            if (this.color) {\r\n                this.element.style.backgroundColor = this.color;\r\n            }\r\n        }\r\n        this.element.classList.toggle(\"prosemirror-dropcursor-block\", isBlock);\r\n        this.element.classList.toggle(\"prosemirror-dropcursor-inline\", !isBlock);\r\n        let parentLeft, parentTop;\r\n        if (!parent || parent == document.body && getComputedStyle(parent).position == \"static\") {\r\n            parentLeft = -pageXOffset;\r\n            parentTop = -pageYOffset;\r\n        }\r\n        else {\r\n            let rect = parent.getBoundingClientRect();\r\n            let parentScaleX = rect.width / parent.offsetWidth, parentScaleY = rect.height / parent.offsetHeight;\r\n            parentLeft = rect.left - parent.scrollLeft * parentScaleX;\r\n            parentTop = rect.top - parent.scrollTop * parentScaleY;\r\n        }\r\n        this.element.style.left = (rect.left - parentLeft) / scaleX + \"px\";\r\n        this.element.style.top = (rect.top - parentTop) / scaleY + \"px\";\r\n        this.element.style.width = (rect.right - rect.left) / scaleX + \"px\";\r\n        this.element.style.height = (rect.bottom - rect.top) / scaleY + \"px\";\r\n    }\r\n    scheduleRemoval(timeout) {\r\n        clearTimeout(this.timeout);\r\n        this.timeout = setTimeout(() => this.setCursor(null), timeout);\r\n    }\r\n    dragover(event) {\r\n        if (!this.editorView.editable)\r\n            return;\r\n        let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });\r\n        let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);\r\n        let disableDropCursor = node && node.type.spec.disableDropCursor;\r\n        let disabled = typeof disableDropCursor == \"function\"\r\n            ? disableDropCursor(this.editorView, pos, event)\r\n            : disableDropCursor;\r\n        if (pos && !disabled) {\r\n            let target = pos.pos;\r\n            if (this.editorView.dragging && this.editorView.dragging.slice) {\r\n                let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);\r\n                if (point != null)\r\n                    target = point;\r\n            }\r\n            this.setCursor(target);\r\n            this.scheduleRemoval(5000);\r\n        }\r\n    }\r\n    dragend() {\r\n        this.scheduleRemoval(20);\r\n    }\r\n    drop() {\r\n        this.scheduleRemoval(20);\r\n    }\r\n    dragleave(event) {\r\n        if (!this.editorView.dom.contains(event.relatedTarget))\r\n            this.setCursor(null);\r\n    }\r\n}\r\n\r\nexport { dropCursor };\r\n", "import { Extension } from '@tiptap/core'\nimport { dropCursor } from '@tiptap/pm/dropcursor'\n\nexport interface DropcursorOptions {\n  /**\n   * The color of the drop cursor\n   * @default 'currentColor'\n   * @example 'red'\n   */\n  color: string | undefined,\n\n  /**\n   * The width of the drop cursor\n   * @default 1\n   * @example 2\n  */\n  width: number | undefined,\n\n  /**\n   * The class of the drop cursor\n   * @default undefined\n   * @example 'drop-cursor'\n  */\n  class: string | undefined,\n}\n\n/**\n * This extension allows you to add a drop cursor to your editor.\n * A drop cursor is a line that appears when you drag and drop content\n * inbetween nodes.\n * @see https://tiptap.dev/api/extensions/dropcursor\n */\nexport const Dropcursor = Extension.create<DropcursorOptions>({\n  name: 'dropCursor',\n\n  addOptions() {\n    return {\n      color: 'currentColor',\n      width: 1,\n      class: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      dropCursor(this.options),\n    ]\n  },\n})\n"],
  "mappings": "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",
  "names": ["rect"]
}
