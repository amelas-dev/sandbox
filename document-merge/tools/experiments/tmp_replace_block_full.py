# -*- coding: utf-8 -*-
import pathlib

path = pathlib.Path('src/components/importer/DatasetImportDialog.tsx')
text = path.read_text()

start_marker = '            <ScrollArea className="max-h-64">'
end_marker = '            </ScrollArea>'
start = text.index(start_marker)
end = text.index(end_marker, start) + len(end_marker)
new_block = "            <ScrollArea className=\"max-h-64\">\n              <div className=\"min-w-max\">\n                <table className=\"w-full border-collapse text-left text-xs\">\n                  <thead className=\"sticky top-0 bg-slate-100 text-[11px] uppercase tracking-wide dark:bg-slate-800\">\n                    <tr>\n                      <th className=\"w-12 border border-slate-200 px-2 py-1 font-semibold text-slate-500 dark:border-slate-700\">\n                        #\n                      </th>\n                      {dataset.fields.map((field) => (\n                        <th\n                          key={field.key}\n                          className=\"min-w-[140px] border border-slate-200 px-2 py-1 font-semibold text-slate-600 dark:border-slate-700\"\n                        >\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <span className=\"truncate\" title={field.label}>\n                              {field.label}\n                            </span>\n                            <Badge\n                              variant=\"outline\"\n                              className=\"shrink-0 rounded-full border-slate-300 bg-slate-50 px-2 py-0.5 text-[10px] uppercase text-slate-500 dark:border-slate-700 dark:bg-slate-800/80 dark:text-slate-300\"\n                            >\n                              {field.type}\n                            </Badge>\n                          </div>\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {datasetPreview(dataset, 10).map((row, rowIndex) => (\n                      <tr\n                        key={rowIndex}\n                        className=\"odd:bg-white even:bg-slate-50 dark:odd:bg-slate-900 dark:even:bg-slate-900/70\"\n                      >\n                        <td className=\"border border-slate-200 px-2 py-1 text-slate-500 dark:border-slate-800\">\n                          {rowIndex + 1}\n                        </td>\n                        {dataset.fields.map((field) => {\n                          const value = row[field.key];\n                          const text = value === null || value === undefined ? '' : String(value);\n                          return (\n                            <td\n                              key={field.key}\n                              className=\"border border-slate-200 px-2 py-1 align-top text-slate-700 dark:border-slate-800 dark:text-slate-200\"\n                              title={text}\n                            >\n                              {text ? (\n                                <span className=\"block whitespace-pre-wrap break-words\">{text}</span>\n                              ) : (\n                                <span className=\"text-slate-400\">—</span>\n                              )}\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              <ScrollBar orientation=\"horizontal\" />\n            </ScrollArea>"

text = text[:start] + new_block + text[end:]
path.write_text(text, encoding='utf-8')